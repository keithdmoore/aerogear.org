---
layout: basic
title: Authentication and User enrollment
---
// tag::auth[]
== Authentication and User enrollment

An Authenticator manages different authentication module implementations. It is basically a factory that hides the concrete instantiation of a specific Authentication Module implementation. The class offers simple APIs to add, remove, or get access to a 'authentication module'.

An AuthenticationModule represents an authentication module and provides the authentication and enrollment API. The default implementation uses REST as the auth transport. Similar to the Pipe, technical details of the underlying system are not exposed

=== Creating an authenticator with an authentication module

To create an authenticator, you need to use the AGAuthenticator class. Below is an example: 

[source,c]
----
// create an authenticator object
AGAuthenticator* authenticator = [AGAuthenticator authenticator];

// add a new auth module and the required 'base url':
NSURL* baseURL = [NSURL URLWithString:@"https://todo-aerogear.rhcloud.com/todo-server/"];
id<AGAuthenticationModule> myMod = [authenticator auth:^(id<AGAuthConfig> config) {
    [config setName:@"authMod"];
    [config setBaseURL:baseURL];
}];
----

The AGAuthenticator class offers some simple 'management' APIs to work with containing AGAuthenticationModule objects. The API provides an authentication and enrollment API. The default implementation uses REST as the auth transport. Similar to the pipe API technical details of the underlying system are not exposed.

=== Register a user

The _enroll_ function of the 'AGAuthenticationModule' protocol is used to register new users with the backend:

[source,c]
----
// assemble the dictionary that has all the data for THIS particular user:

NSDictionary* userData = @{@"username": @"john",
						   @"password": @"123",
						   @"email", @"me@you.com",
						   @"betaAccountToken", @"21sda812sad24"};
// register a new user
[myMod enroll:userData success:^(id data) {
    // after a successful _registration_, we can work
    // with the returned data...
    NSLog(@"We got: %@", data);
} failure:^(NSError *error) {
    // when an error occurs... at least log it to the console..
    NSLog(@"SAVE: An error occured! \n%@", error);
}];
----

The _enroll_ function submits a generic map object with contains all the information about the new user, that the server endpoint requires. The default (REST) auth module issues for the above a request against _https://todo-aerogear.rhcloud.com/todo-server/auth/enroll_. Besides the NSDictionary the function accepts two simple blocks that are invoked on success or in case of a failure.

=== Login 

Once you have a _valid_ user you can use that information to issue a login against the server, to start accessing protected endpoints:

[source,c]
----
NSDictionary *credentials = @{@"username": @"john", @"password": @"123"};
// issuing a login
[myMod login:credentials success:^(id object) {
    // after a successful _login_, we can work
    // with the returned data...
} failure:^(NSError *error) {
    // when an error occurs... at least log it to the console..
    NSLog(@"SAVE: An error occured! \n%@", error);
}];
----

The default (REST) auth module issues for the above a request against _https://todo-aerogear.rhcloud.com/todo-server/auth/login_. Besides the _username_ and the _password_ (stored in a _NSDictionary_), the function accepts two simple blocks that are invoked on success or in case of a failure.

=== Pass the auth module to a pipe

After running a successful login, you can start using the _AGAuthenticationModule_ object on a _AGPipe_ object to access protected endpoints:

[source,c]
----
id<AGPipe> tasks = [pipeline pipe:^(id<AGPipeConfig> config) {
    [config setName:@"tasks"];
    [config setBaseURL:serverURL];
    [config setAuthModule:myMod];
}];

[tasks read:^(id responseObject) {
    // LOG the JSON response, returned from the server:
    NSLog(@"READ RESPONSE\n%@", [responseObject description]);
} failure:^(NSError *error) {
    // when an error occurs... at least log it to the console..
    NSLog(@"Read: An error occured! \n%@", error);
}];
----

When creating a pipe you need to use the _authModule_ argument in order to pass in an _AGAuthenticationModule_ object.

=== Logout

The logout from the server can be archived by using the _logout_ function:

[source,c]
----
// logout:
[myMod logout:^{
    // after a successful _logout_, when can notify the application
} failure:^(NSError *error) {
    // when an error occurs... at least log it to the console..
    NSLog(@"SAVE: An error occured! \n%@", error);
}];
----

The default (REST) auth module issues for the above a request against _https://todo-aerogear.rhcloud.com/todo-server/auth/logout_. The function accepts two simple blocks that are invoked on success or in case of a failure.

=== NSURLCredential support.
As of version 1.1.0 of the library, you can pass directly on the Pipe configuration an link:http://tinyurl.com/neqbum2[NSURLCredential] object. Doing that will give you instant support for the built-in authentication protocols already supported in iOS (such as Basic/Digest). When a request comes in where an authentication challenge is required, the library will pass to the server those credentials. 

To pass the NSURLCredential object, use the _setCredential_ configuration method during construction of the Pipe:

[source,c]
----
id<AGPipe> tasks = [pipeline pipe:^(id<AGPipeConfig> config) {
    [config setName:@"tasks"];
    [config setCredential:[NSURLCredential
                credentialWithUser:@"username" password:@"passwd" persistence:NSURLCredentialPersistenceNone];
}];
----

NOTE: Care should be taken when specifying the persistence type param when constructing the NSURLCredential object. Specifying type other than link:http://tinyurl.com/q28l9hd[NSURLCredentialPersistenceNone], will have the effect of the credentials to be preserved across session and application restarts. In that case, the developer is responsible to clear the cache. See link:http://tinyurl.com/n9amy5q[NSURLCredentialStorage] class reference for more information. 


=== Time out and Cancel pending operations

As with the case of Pipe, configured timeout interval (in the config object) and cancel operation in _AGAuthenticationModule_ is supported too.

// end::auth[]