---
layout: basic
title: Your first Chrome/Push App
---

== Your first Chrome/Push App
Now that the UnifiedPush server is up and running, time to create a sample application that will exercise AeroGear's Chrome Push library support.

Let's get started!

== Creating the application
Since a Chrome Packaged Application is just a Web Application consisting of HTML, Javascript and CSS, you can use any editor you feel comfortable with.

Here is an example of what the directory structure will look like

image::./img/app_1.png[App Structure]

You can download AeroGear.js link:https://github.com/aerogear/aerogear-js-dist/releases/latest[here] and the jQuery library link:http://jquery.com/download/[here]

We will create the remaining files.

The first thing we need to do is create a manifest.json file and add the _pushMessaging_ permission:

[source,json]
----
{
    "name": "NAME OF YOUR APP",
    "version": "1",
    "manifest_version": 2,
    "description": "DESCRIPTION OF YOUR APP",
    "icons": {
        "16": "images/icon-16.png",
        "128": "images/icon-128.png"
    },
    "app": {
        "background": {
          "scripts": ["scripts/main.js", "scripts/jquery.min.js", "scripts/aerogear.js"]
        }
    },
    "permissions": ["pushMessaging"]
}
----

[NOTE]
_To Learn more about what the manifest file is, link:http://developer.chrome.com/apps/manifest[go here]_

Now we need to create our "background event" script, which will be our main.js file.

[source,javascript]
----
chrome.app.runtime.onLaunched.addListener(function() {
    chrome.app.window.create('index.html', {
        width: 500,
        height: 309
    });
});

// This will happen when the app is first Installed
chrome.runtime.onInstalled.addListener(function() {

    // First we need to get the channelID and then send it to the UnifiedPush Server
    // This code could also go in the 'onLaunched' method

    chrome.pushMessaging.getChannelId( true, function(channelId) {
        /*
            Set our Variant ID and Secret and the location of the UnifiedPush Server
        */
        var variantId = "VARIANT_ID",
            variantSecret = "VARIANT_SECRET",
            pushServerURL = "http://localhost:8080/ag-push";

        // Once we have the channelID we can then register with the UnifiedPush Server using
        // the AeroGear.js library
        var client = AeroGear.UnifiedPushClient(
                variantId,
                variantSecret,
                pushServerURL
            ),settings = {};
            // The channelId will be the "device token"

        settings.metadata = {
            deviceToken: channelId.channelId
        };

        // Register with the UnifiedPush Server
        client.registerWithPushServer( settings );

    });
});
----

The above code is responsible for registering with the UnifiedPush Server once the application is installed.

[NOTE]
_You can use the example implementation from the UnifiedPush server for the chrome.pushMessaging.getChannelId method_

[NOTE]_To learn more about the Chrome App Lifcycle, link:http://developer.chrome.com/apps/app_lifecycle[go here]_

With the "background" code out of the way, let now lets create a basic HTML page and call it index.html

[source,html]
----
<!doctype html>
<html>
    <head>
        <meta charset="utf-8">
        <title>AeroGear Chrome App</title>
    </head>
    <body>
        <h1>AeroGear Chrome App</h1>
        <div id="messages">
            <ul></ul>
        </div>
        <script src="scripts/app.js"></script>
    </body>
</html>
----

We also need to create our app.js:

[source,javascript]
----
// Here we listen for incoming messages from GCM and then we will just add them to our list
chrome.pushMessaging.onMessage.addListener( function( message ) {
    var ul = document.querySelector('#messages ul'),
        li = document.createElement('li');

    li.innerHTML = message.payload;
    ul.appendChild( li );
});
----

=== Upload to the Chrome Web Store

To use GCM for Chrome, you will need to publish your app on the Chrome Web Store.  Publishing to the Web Store is beyond the scope of the tutorial, but here is an excellent walkthrough from the link:https://developers.google.com/chrome/web-store/docs/get_started_simple#step1[chrome developer docs]

Now that we have our application up an running time to link:../push-notification[send messages] using the AeroGear UnifiedPush Server!
